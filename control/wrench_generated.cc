/* Don't edit this; this code was generated by op_graph */
#include "control/wrench_generated.hh"

namespace jet {
namespace control {
VecNd<6> WrenchDelta::to_vector(const WrenchDelta &in_grp) {
  const VecNd<6> out =
      (VecNd<6>() << ((in_grp.force_N_error)[0]), ((in_grp.force_N_error)[1]),
       ((in_grp.force_N_error)[2]), ((in_grp.torque_Nm_error)[0]),
       ((in_grp.torque_Nm_error)[1]), ((in_grp.torque_Nm_error)[2]))
          .finished();
  return out;
}
WrenchDelta WrenchDelta::from_vector(const VecNd<6> &in_vec) {
  const VecNd<3> anon_dfb3dc =
      (VecNd<3>() << (in_vec[0]), (in_vec[1]), (in_vec[2])).finished();
  const VecNd<3> anon_3bdc57 =
      (VecNd<3>() << (in_vec[3]), (in_vec[4]), (in_vec[5])).finished();
  const WrenchDelta out = WrenchDelta{anon_dfb3dc, anon_3bdc57};
  return out;
}
Wrench operator-(const Wrench &a, const Wrench &b) {
  const Wrench difference = Wrench{((a.force_N) - (b.force_N)), ((a.torque_Nm) - (b.torque_Nm))};
  return difference;
}
Wrench operator+(const Wrench &a, const WrenchDelta &grp_b) {
  const Wrench out = Wrench{((a.force_N) + (grp_b.force_N_error)),
                            ((a.torque_Nm) + (grp_b.torque_Nm_error))};
  return out;
}
VecNd<6> Wrench::compute_delta(const Wrench &a, const Wrench &b) {
  const Wrench difference = a - b;
  const VecNd<3> force_N_error = difference.force_N;
  const VecNd<3> torque_Nm_error = difference.torque_Nm;
  const WrenchDelta delta = WrenchDelta{force_N_error, torque_Nm_error};
  const VecNd<6> out_vec = WrenchDelta::to_vector(delta);
  return out_vec;
}
Wrench Wrench::apply_delta(const Wrench &a, const VecNd<6> &delta) {
  const WrenchDelta grp_b = WrenchDelta::from_vector(delta);
  const Wrench out = a + grp_b;
  return out;
}
} // namespace control
} // namespace jet