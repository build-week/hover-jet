/* Don't edit this; this code was generated by op_graph */
#include "control/vanes.hh"

namespace jet {
namespace control {
VecNd<4>
QuadraframeStatusDelta::to_vector(const QuadraframeStatusDelta &in_grp) {
  const VecNd<4> out =
      (VecNd<4>() << (in_grp.servo_0_angle_error), (in_grp.servo_1_angle_error),
       (in_grp.servo_2_angle_error), (in_grp.servo_3_angle_error))
          .finished();
  return out;
}
QuadraframeStatusDelta
QuadraframeStatusDelta::from_vector(const VecNd<4> &in_vec) {
  const QuadraframeStatusDelta out = QuadraframeStatusDelta{
      (in_vec[0]), (in_vec[1]), (in_vec[2]), (in_vec[3])};
  return out;
}
QuadraframeStatus operator-(const QuadraframeStatus &a,
                            const QuadraframeStatus &b) {
  const QuadraframeStatus difference =
      QuadraframeStatus{((a.servo_0_angle) - (b.servo_0_angle)),
                        ((a.servo_1_angle) - (b.servo_1_angle)),
                        ((a.servo_2_angle) - (b.servo_2_angle)),
                        ((a.servo_3_angle) - (b.servo_3_angle))};
  return difference;
}
QuadraframeStatus operator+(const QuadraframeStatus &a,
                            const QuadraframeStatusDelta &grp_b) {
  const QuadraframeStatus out =
      QuadraframeStatus{((a.servo_0_angle) + (grp_b.servo_0_angle_error)),
                        ((a.servo_1_angle) + (grp_b.servo_1_angle_error)),
                        ((a.servo_2_angle) + (grp_b.servo_2_angle_error)),
                        ((a.servo_3_angle) + (grp_b.servo_3_angle_error))};
  return out;
}
VecNd<4> QuadraframeStatus::compute_delta(const QuadraframeStatus &a,
                                          const QuadraframeStatus &b) {
  const QuadraframeStatus difference = a - b;
  const double servo_2_angle_error = difference.servo_2_angle;
  const double servo_0_angle_error = difference.servo_0_angle;
  const double servo_1_angle_error = difference.servo_1_angle;
  const double servo_3_angle_error = difference.servo_3_angle;
  const QuadraframeStatusDelta delta =
      QuadraframeStatusDelta{servo_0_angle_error, servo_1_angle_error,
                             servo_2_angle_error, servo_3_angle_error};
  const VecNd<4> out_vec = QuadraframeStatusDelta::to_vector(delta);
  return out_vec;
}
QuadraframeStatus QuadraframeStatus::apply_delta(const QuadraframeStatus &a,
                                                 const VecNd<4> &delta) {
  const QuadraframeStatusDelta grp_b =
      QuadraframeStatusDelta::from_vector(delta);
  const QuadraframeStatus out = a + grp_b;
  return out;
}
} // namespace control
} // namespace jet